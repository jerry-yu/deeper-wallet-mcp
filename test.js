// decode-v4-swap.js  （示例，ethers v5）
const { ethers } = require("ethers");

// 1) top-level interface (execute(bytes, bytes[], uint256))
const EXECUTE_ABI = [
  "function execute(bytes commands, bytes[] inputs, uint256 deadline)"
];
const iface = new ethers.utils.Interface(EXECUTE_ABI);

function safeLogBN(bn) { return bn ? bn.toString() : bn; }

function decodeV4Swap(v4EncodedBytesHex) {
  // v4EncodedBytesHex 是 inputs[0]，类型 bytes（hex string）
  // decode tuple (bytes actions, bytes[] params)
  const abi = ethers.utils.defaultAbiCoder;
  const [actionsBytes, paramsArray] = abi.decode(["bytes", "bytes[]"], v4EncodedBytesHex);

  const actionBytes = ethers.utils.arrayify(actionsBytes);
  console.log("V4.actions length =", actionBytes.length, "V4.params count =", paramsArray.length);

  for (let i = 0; i < actionBytes.length; ++i) {
    const b = actionBytes[i];
    console.log(i, "action byte = 0x" + b.toString(16).padStart(2,"0"));

    const paramHex = paramsArray[i]; // this is a hex string (bytes)
    // dispatch by action id:
    if (b === 0x07) { // SWAP_EXACT_IN
      // ExactInputParams: (Currency currencyIn, PathKey[] path, uint128 amountIn, uint128 amountOutMinimum)
      // Currency is an address alias; PathKey[] is a tuple (address,uint24,int24,address,bytes)[] — be explicit
      const PATHKEY_TUPLE = "(address,uint24,int24,address,bytes)";
      const decoded = abi.decode(["address", PATHKEY_TUPLE + "[]", "uint128", "uint128"], paramHex);
      console.log(" SWAP_EXACT_IN:", {
        currencyIn: decoded[0],
        pathLength: decoded[1].length,
        amountIn: safeLogBN(decoded[2]),
        amountOutMin: safeLogBN(decoded[3])
      });
      // If you want, decode each PathKey entry:
      decoded[1].forEach((pk, idx) => {
        console.log("  path", idx, {
          intermediateCurrency: pk[0],
          fee: pk[1].toString(),
          tickSpacing: pk[2].toString(),
          hooks: pk[3],
          hookDataLen: ethers.utils.arrayify(pk[4]||"0x").length
        });
      });
    } else if (b === 0x0b) { // SETTLE
      // decode to (Currency, uint256 amount, bool payerIsUser) per router code
      const [currency, amount, payerIsUser] = abi.decode(["address", "uint256", "bool"], paramHex);
      console.log(" SETTLE:", { currency, amount: safeLogBN(amount), payerIsUser });
    } else {
      console.log("  (other action) raw param length:", ethers.utils.arrayify(paramHex).length);
    }
  }
}

// Example usage: decode top-level execute calldata
function decodeExecute(calldata) {
  const parsed = iface.parseTransaction({ data: calldata });
  const commandsHex = parsed.args[0]; // bytes
  const inputs = parsed.args[1]; // bytes[]
  const deadlineBN = parsed.args[2];
  console.log("deadline:", deadlineBN.toString());
  // top-level commands is a byte array
  const cmds = ethers.utils.arrayify(commandsHex);
  console.log("commands bytes length:", cmds.length, "inputs count:", inputs.length);
  // find V4_SWAP byte (0x10) position:
  for (let i = 0; i < cmds.length; ++i) {
    if (cmds[i] === 0x10) {
      console.log(" -> Found V4_SWAP at top index", i);
      decodeV4Swap(inputs[i]);
    }
  }
}

// call decodeExecute with the tx calldata hex (string)
// It will print the nested action decode; make sure to handle big ints via .toString()
try {
  decodeExecute("0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000068c59bba0000000000000000000000000000000000000000000000000000000000000004100604040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000056000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003070b0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006727002ad781e0fb768ba11e404965aba89affca0000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000006727002ad781e0fb768ba11e404965aba89affca0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000006727002ad781e0fb768ba11e404965aba89affca000000000000000000000000e49acc3b16c097ec88dc9352ce4cd57ab7e35b95000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000600000000000000000000000006727002ad781e0fb768ba11e404965aba89affca00000000000000000000000090df5a3ede13ee1d090573460e13b0bfd8aa9708000000000000000000000000000000000000000000000383c89b76ac150da12f0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090df5a3ede13ee1d090573460e13b0bfd8aa970800000000000000000000000000000000000000000000000000000000000000000c");
} catch (err) {
  console.error("Top-level parse error:", err);
}